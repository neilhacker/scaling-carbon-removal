This is just a note on how cumulative growth (i.e of tonnes of carbon removed) was calculated:

we have:
y = C * r^x

y = tonnes removed at time x
C = tonnes removed at time 0 (current tonnes removed)
r = rate of growth of tonnes removed (20% increase a year -> r=1.2)
x = year &or time

we want to calculate ∑Cr^x from 0 to n

= C * (1-r^(n+1))/(1-r)

---------------
For the unit cost for a technology at time n given the cumulative volume is given by above 

Cx = C1 * x ^log2(b) 
b = 1-l 
l = learning rate

if we have that the tech costs Cx at x cumulative units then to rearrage for C1 we have 
C1 = Cx/x ^log2(b) 

to calculate the unit cost curve at time n we find the cumulative units at time n and then 
plug this in as x

Cn = C1 * (C * (1-r^(n+1))/(1-r))^log2(b) 

-------------------------------------------------
// to find total cost of moving from Ca,Qa to Cb we could use 
<b 
    onclick="cumulativeCost(
        document.getElementsByClassName('cumulativeCarbonRemovalAmount')[0].value, /* Qa */
        document.getElementsByClassName('scaleIncreaseToNewCost')[0].value  , /* Qb */
        document.getElementsByClassName('wrightsLawC1')[0].value, /* c1 */
        document.getElementsByClassName('wrightLearningCurve')[0].value /* l */
        )">Click here</b> to see how much this would cost.

<b id="scaleCost" style="color:#7BBEF7" onclick="sidebar('Cb')"></b>

which uses a for loop and a function in helper.js to be exact 

OR

we can use the Euler–Maclaurin formula to approximate it with an integral